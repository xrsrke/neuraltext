# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/12_model.ipynb.

# %% auto 0
__all__ = ['RNN']

# %% ../nbs/12_model.ipynb 4
from typing import Optional, Tuple

import torch
import torch.nn as nn
from torchtyping import TensorType

# %% ../nbs/12_model.ipynb 6
class RNN(nn.Module):
    """The Decoder Neural Signal."""
    def __init__(
        self, input_size: int, hidden_size: int, output_size: int, slow_frequency: int = 100
    ):
        super().__init__()
        self.hidden_size = hidden_size
        self.slow_frequency = slow_frequency

        self.gru1 = nn.GRU(input_size, hidden_size)
        self.gru2 = nn.GRU(hidden_size, output_size)
        self.zt = nn.Linear(hidden_size, 1)

    def forward(
        self,
        x: torch.Tensor, hidden: Optional[torch.Tensor] = None
    ) -> Tuple[
        torch.Tensor,
        torch.Tensor,
        torch.Tensor
    ]:
        """The forward pass."""
        gru1_out, hidden = self.gru1(x, hidden)
        gru2_out = self.gru2(gru1_out)[0][::self.slow_frequency]
        zt_out = torch.sigmoid(self.zt(hidden[0]))
        return gru2_out, zt_out, hidden
